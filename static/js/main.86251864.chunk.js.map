{"version":3,"sources":["provider/StarWarsContext.js","services/index.js","provider/Provider.js","components/Table/TableHeader.js","components/Table/TableBody.js","hooks/Filter.js","components/Table/index.js","components/InputNamePlanet/index.js","components/SelectNumericValues/SelectColumnFilter.js","components/SelectNumericValues/SelectComparison.js","components/SelectNumericValues/InputValue.js","components/SelectNumericValues/ButtonFilter.js","components/SelectNumericValues/index.js","components/ShowFilterScreen/index.js","components/OderColumn/index.js","components/SearchBar/index.js","components/Header/index.js","App.js","index.js"],"names":["StarWarsContext","createContext","requestServices","URL","a","data","fetch","getPlanetsResponse","json","planetsJson","results","map","el","residents","result","newArr","next","getPlanets","response","Provider","children","useState","setDate","isLoading","setLoading","name","setName","filterByNumericValues","setFilterByNumericValues","column","sort","order","setOrder","orderApproved","setOrderApproved","changeOrderColumn","target","value","setsort","dataset","addFilterByNumeric","newFilter","deleteFilter","filter","useEffect","GetPlanets","then","filters","filterByName","TableHeader","nameColumn","index","className","TableBody","contentRow","rows","Object","entries","key","rel","href","FilterByColumn","planets","setFilter","length","forEach","planetsFilter","planet","comparison","Number","switchFilter","orderColumns","some","isNaN","b","localeCompare","Filter","useContext","setPlanets","isOrderPlanets","planetsFilterName","includes","FilterName","planetsFilterNumeric","orderPlanets","Table","keys","InputNamePlanet","type","onChange","SelectColumnFilter","handleChange","columnFilter","required","SelectComparison","arrComparison","InputValue","numberValue","ButtonFilter","onClickAddFilterNumeric","onClick","COLUMN_FILTER","ARR_COMPARISON","SelectNumericValues","filterNumeric","setFilterNumeric","message","setMessage","typeColumn","setTypeColumn","changeColumnFilter","useCallback","item","every","onSubmit","e","preventDefault","ShowFilterScreen","OrderColumn","htmlFor","id","defaultChecked","SearchBar","Header","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.86251864.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nconst StarWarsContext = createContext();\n\nexport default StarWarsContext;\n","const requestServices = async (URL, data = []) => {\n  const getPlanetsResponse = await fetch(URL);\n  const planetsJson = await getPlanetsResponse.json();\n  const result = await planetsJson.results.map((el) => {\n    delete el.residents;\n    return el;\n  });\n  let newArr = [];\n  if (planetsJson.next) {\n    newArr = await requestServices(planetsJson.next, result);\n  } else {\n    newArr = [...result, ...newArr];\n  }\n  return [...newArr, ...data];\n};\n\n// const requestServices = async (URL) => {\n//   const getPlanetsResponse = await fetch(URL);\n//   const planetsJson = await getPlanetsResponse.json();\n//   const result = await planetsJson.results.map((el) => {\n//     delete el.residents;\n//     return el;\n//   });\n\n//   return result;\n// };\n\nconst getPlanets = async () => {\n  const URL = 'https://swapi-trybe.herokuapp.com/api/planets/';\n  const response = await requestServices(URL);\n  return response;\n};\n\nexport default getPlanets;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport StarWarsContext from './StarWarsContext';\nimport GetPlanets from '../services';\n\nfunction Provider({ children }) {\n  const [data, setDate] = useState([]);\n  const [isLoading, setLoading] = useState(true);\n  const [name, setName] = useState('');\n  const [filterByNumericValues, setFilterByNumericValues] = useState([]);\n  const [order, setOrder] = useState({\n    column: 'name',\n    sort: 'ASC',\n  });\n  const [orderApproved, setOrderApproved] = useState(true);\n\n  const changeOrderColumn = ({ target: { value, dataset: { setsort } } }) => {\n    setOrder({ ...order, [setsort]: value });\n  };\n\n  const addFilterByNumeric = (newFilter) => {\n    setFilterByNumericValues([...filterByNumericValues, newFilter]);\n  };\n\n  const deleteFilter = ({ target: { dataset: { column } } }) => {\n    const result = filterByNumericValues.filter((el) => el.column !== column);\n    setFilterByNumericValues(result);\n  };\n\n  const setConsumer = () => ({\n    data,\n    isLoading,\n    filters: {\n      filterByName: {\n        name,\n      },\n      filterByNumericValues,\n      order,\n    },\n    setName,\n    addFilterByNumeric,\n    deleteFilter,\n    order,\n    changeOrderColumn,\n    orderApproved,\n    setOrderApproved,\n  });\n\n  useEffect(() => {\n    GetPlanets().then((response) => {\n      setDate(response);\n      setLoading(false);\n    });\n  }, []);\n\n  return (\n    <StarWarsContext.Provider value={ setConsumer() }>\n      { children }\n    </StarWarsContext.Provider>\n  );\n}\n\nProvider.propTypes = {\n  children: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default Provider;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction TableHeader({ nameColumn }) {\n  return (\n    <thead>\n      <tr>\n        { nameColumn.map((el, index) => (\n          <th className=\"m-1 bg-dark\" key={ index }>{ el }</th>\n        ))}\n      </tr>\n    </thead>\n  );\n}\n\nexport default TableHeader;\n\nTableHeader.propTypes = {\n  nameColumn: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction TableBody({ contentRow }) {\n  const renderTd = (rows) => {\n    const result = Object.entries(rows).map(([key, value], index) => {\n      if (key === 'films' || key === 'url') {\n        return (\n          <td className=\"m-1 bg-dark\" key={ index }>\n            <a target=\"_blank\" rel=\"noreferrer\" href={ value }>\n              Link\n            </a>\n          </td>\n        );\n      }\n      if (key === 'name') {\n        return (\n          <td className=\"m-1 bg-dark\" data-testid=\"planet-name\" key={ index }>\n            {value}\n          </td>\n        );\n      }\n      return <td className=\"m-1 bg-dark\" key={ index }>{value}</td>;\n    });\n    return result;\n  };\n\n  return (\n    <tbody>\n      {contentRow.map((el, index) => (\n        <tr key={ index }>{renderTd(el)}</tr>\n      ))}\n    </tbody>\n  );\n}\n\nTableBody.propTypes = {\n  contentRow: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default TableBody;\n","import { useContext, useEffect, useState } from 'react';\nimport StarWarsContext from '../provider/StarWarsContext';\n\nfunction FilterName(data, value) {\n  if (!value) return data;\n  const result = data.filter((el) => {\n    if (el.name.includes(value)) return el;\n    return '';\n  });\n  return result;\n}\n\nfunction switchFilter({ column, comparison, value }, planet) {\n  if (planet[column] === 'unknown') return '';\n  if (comparison === 'maior que' && Number(planet[column]) > Number(value)) {\n    return planet;\n  }\n  if (comparison === 'menor que' && Number(planet[column]) < Number(value)) {\n    return planet;\n  }\n  if (comparison === 'igual a' && Number(planet[column]) === Number(value)) {\n    return planet;\n  }\n  return '';\n}\n\nfunction FilterByColumn(planets, setFilter) {\n  let result = [...planets];\n  if (setFilter.length === 0) return planets;\n  setFilter.forEach((el) => {\n    const planetsFilter = result.filter((planet) => switchFilter(el, planet));\n    result = [...planetsFilter];\n  });\n  return result;\n}\n\nfunction orderColumns(planets, { column, sort }) {\n  if (sort === 'ASC') {\n    if (planets.some((el) => !Number.isNaN(Number(el[column])))) {\n      return planets.sort((a, b) => a[column] - b[column]);\n    }\n    return planets.sort((a, b) => a[column].localeCompare(b[column]));\n  }\n\n  if (planets.some((el) => !Number.isNaN(Number(el[column])))) {\n    return planets.sort((a, b) => b[column] - a[column]);\n  }\n\n  return planets.sort((a, b) => b[column].localeCompare(a[column]));\n}\n\nfunction Filter() {\n  const {\n    data,\n    filters: {\n      filterByName: { name },\n      filterByNumericValues,\n      order,\n    },\n    orderApproved,\n    setOrderApproved,\n  } = useContext(StarWarsContext);\n\n  const [planets, setPlanets] = useState([]);\n\n  useEffect(() => {\n    if (orderApproved && data.length > 1) {\n      const isOrderPlanets = orderColumns(data, order);\n      setPlanets(isOrderPlanets);\n      setOrderApproved(false);\n    } else {\n      setPlanets(data);\n    }\n  }, [data, order, orderApproved, setOrderApproved]);\n\n  useEffect(() => {\n    const planetsFilterName = FilterName(data, name);\n    const planetsFilterNumeric = FilterByColumn(planetsFilterName, filterByNumericValues);\n    if (orderApproved && planetsFilterNumeric.length > 1) {\n      const orderPlanets = orderColumns(planetsFilterNumeric, order);\n      setPlanets(orderPlanets);\n      setOrderApproved(false);\n    } else {\n      setPlanets(planetsFilterNumeric);\n    }\n  }, [data, filterByNumericValues, name, order, orderApproved, setOrderApproved]);\n\n  return [planets];\n}\n\nexport default Filter;\n","import React, { useContext } from 'react';\nimport StarWarsContext from '../../provider/StarWarsContext';\nimport TableHeader from './TableHeader';\nimport TableBody from './TableBody';\nimport Filter from '../../hooks/Filter';\n\nfunction Table() {\n  const { isLoading, data } = useContext(StarWarsContext);\n  const [planets] = Filter();\n\n  if (isLoading) return <h1>Loading</h1>;\n\n  const headerTable = () => Object.keys(data[0]);\n\n  return (\n    <main className=\"container bg-image-galaxy text-color__light\">\n      <table>\n        <TableHeader nameColumn={ headerTable() } />\n        <TableBody contentRow={ planets } />\n      </table>\n    </main>\n  );\n}\n\nexport default Table;\n","import React, { useContext } from 'react';\nimport StarWarsContext from '../../provider/StarWarsContext';\n\nfunction InputNamePlanet() {\n  const {\n    setName,\n    filters: { filterByName: { name } },\n  } = useContext(StarWarsContext);\n\n  const handleChange = ({ target: { value } }) => {\n    setName(value);\n  };\n\n  return (\n    <input\n      data-testid=\"name-filter\"\n      value={ name }\n      type=\"text\"\n      onChange={ handleChange }\n      className=\"input-text \"\n    />\n  );\n}\n\nexport default InputNamePlanet;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction SelectColumnFilter({ column, handleChange, columnFilter }) {\n  return (\n    <div className=\"m-1\">\n      <select\n        name=\"column\"\n        value={ column }\n        onChange={ handleChange }\n        data-testid=\"column-filter\"\n        required\n      >\n        {\n          columnFilter.length === 0\n            ? <option value=\"\">{' '}</option>\n            : (columnFilter.map((el, index) => (\n              <option key={ index } value={ el }>{el}</option>\n            )))\n        }\n      </select>\n    </div>\n  );\n}\n\nSelectColumnFilter.propTypes = {\n  column: PropTypes.string.isRequired,\n  handleChange: PropTypes.func.isRequired,\n  columnFilter: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nexport default SelectColumnFilter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction SelectComparison({ comparison, handleChange, arrComparison }) {\n  return (\n    <div className=\"m-1\">\n      <select\n        value={ comparison }\n        onChange={ handleChange }\n        name=\"comparison\"\n        data-testid=\"comparison-filter\"\n        required\n      >\n        { arrComparison.map((el, index) => (\n          <option key={ index }>{ el }</option>\n        ))}\n      </select>\n    </div>\n  );\n}\n\nSelectComparison.propTypes = {\n  comparison: PropTypes.string.isRequired,\n  handleChange: PropTypes.func.isRequired,\n  arrComparison: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nexport default SelectComparison;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction InputValue({ numberValue, handleChange }) {\n  return (\n    <div className=\"m-1\">\n      <input\n        name=\"value\"\n        onChange={ handleChange }\n        type=\"number\"\n        value={ numberValue }\n        data-testid=\"value-filter\"\n        required\n      />\n    </div>\n  );\n}\n\nInputValue.propTypes = {\n  numberValue: PropTypes.string.isRequired,\n  handleChange: PropTypes.func.isRequired,\n};\n\nexport default InputValue;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction ButtonFilter({ onClickAddFilterNumeric }) {\n  return (\n    <div className=\"m-1\">\n      <button\n        type=\"submit\"\n        onClick={ onClickAddFilterNumeric }\n        data-testid=\"button-filter\"\n      >\n        Filtrar\n      </button>\n    </div>\n  );\n}\n\nButtonFilter.propTypes = {\n  onClickAddFilterNumeric: PropTypes.func.isRequired,\n};\n\nexport default ButtonFilter;\n","import React, { useCallback, useContext, useEffect, useState } from 'react';\nimport StarWarsContext from '../../provider/StarWarsContext';\nimport SelectColumnFilter from './SelectColumnFilter';\nimport SelectorComparison from './SelectComparison';\nimport InputValue from './InputValue';\nimport ButtonFilter from './ButtonFilter';\n\nconst COLUMN_FILTER = [\n  'population',\n  'orbital_period',\n  'diameter',\n  'rotation_period',\n  'surface_water',\n];\nconst ARR_COMPARISON = ['maior que', 'menor que', 'igual a'];\n\nfunction SelectNumericValues() {\n  const {\n    addFilterByNumeric,\n    filters: { filterByNumericValues },\n  } = useContext(StarWarsContext);\n\n  const [filterNumeric, setFilterNumeric] = useState({\n    column: COLUMN_FILTER[0],\n    comparison: ARR_COMPARISON[0],\n    value: '0',\n  });\n  const [message, setMessage] = useState(false);\n  const [typeColumn, setTypeColumn] = useState(COLUMN_FILTER);\n\n  const handleChange = ({ target: { name, value } }) => {\n    setFilterNumeric({ ...filterNumeric, [name]: value });\n  };\n\n  const changeColumnFilter = useCallback(() => {\n    if (filterByNumericValues.length === 0) return COLUMN_FILTER;\n    const results = COLUMN_FILTER.filter((item) => {\n      if (filterByNumericValues.every((el) => el.column !== item)) {\n        return item;\n      }\n      return '';\n    });\n    if (!results.length) return ['---'];\n    return results;\n  }, [filterByNumericValues]);\n\n  useEffect(() => {\n    setTypeColumn(changeColumnFilter());\n  }, [changeColumnFilter]);\n\n  useEffect(() => {\n    setFilterNumeric({\n      column: typeColumn[0],\n      comparison: ARR_COMPARISON[0],\n      value: '0',\n    });\n  }, [filterByNumericValues, typeColumn]);\n\n  const onClickAddFilterNumeric = () => {\n    if (filterNumeric.column && filterNumeric.comparison) {\n      // resetForm();\n      addFilterByNumeric(filterNumeric);\n      setMessage(false);\n    } else {\n      setMessage(true);\n    }\n  };\n\n  return (\n    <form\n      onSubmit={ (e) => e.preventDefault() }\n      className=\"d-flex align-items__center m-1\"\n    >\n      <SelectColumnFilter\n        column={ filterNumeric.column }\n        handleChange={ handleChange }\n        columnFilter={ typeColumn }\n      />\n      <SelectorComparison\n        comparison={ filterNumeric.comparison }\n        handleChange={ handleChange }\n        arrComparison={ ARR_COMPARISON }\n      />\n      <InputValue\n        numberValue={ filterNumeric.value }\n        handleChange={ handleChange }\n      />\n      <ButtonFilter onClickAddFilterNumeric={ onClickAddFilterNumeric } />\n      {message && <span>Selecione todas as opções</span>}\n    </form>\n  );\n}\n\nexport default SelectNumericValues;\n","import React, { useContext } from 'react';\nimport StarWarsContext from '../../provider/StarWarsContext';\n\nfunction ShowFilterScreen() {\n  const {\n    filters: { filterByNumericValues },\n    deleteFilter,\n  } = useContext(StarWarsContext);\n  return (\n    <div className=\"m-1 d-flex justify-content__center align-items__center\">\n      { filterByNumericValues.map((el, index) => (\n        <div data-testid=\"filter\" key={ index } className=\"d-flex\">\n          <span>{ el.column }</span>\n          <button\n            onClick={ deleteFilter }\n            data-column={ el.column }\n            type=\"button\"\n          >\n            X\n          </button>\n        </div>\n      )) }\n    </div>\n  );\n}\n\nexport default ShowFilterScreen;\n","import React, { useContext } from 'react';\nimport StarWarsContext from '../../provider/StarWarsContext';\n\nconst COLUMN_FILTER = [\n  'name', 'population', 'orbital_period',\n  'diameter', 'rotation_period',\n  'surface_water', 'climate', 'gravity', 'terrain',\n];\n\nfunction OrderColumn() {\n  const { order, changeOrderColumn, setOrderApproved } = useContext(StarWarsContext);\n  return (\n    <div className=\"d-flex align-items__center m-1\">\n      <div>\n        <select\n          value={ order.column }\n          onChange={ changeOrderColumn }\n          data-testid=\"column-sort\"\n          data-setsort=\"column\"\n        >\n          { COLUMN_FILTER.map((column, index) => (\n            <option key={ index } value={ column }>{column}</option>\n          ))}\n        </select>\n      </div>\n      <div className=\"d-flex align-items__center m-2\">\n        <label htmlFor=\"asc\" className=\"m-2 d-flex\">\n          ASC\n          <input\n            onChange={ changeOrderColumn }\n            data-setsort=\"sort\"\n            id=\"asc\"\n            name=\"asc-desc\"\n            data-testid=\"column-sort-input-asc\"\n            type=\"radio\"\n            value=\"ASC\"\n            defaultChecked\n          />\n        </label>\n        <label htmlFor=\"desc\" className=\"m-2 d-flex\">\n          DESC\n          <input\n            onChange={ changeOrderColumn }\n            data-setsort=\"sort\"\n            id=\"desc\"\n            name=\"asc-desc\"\n            data-testid=\"column-sort-input-desc\"\n            type=\"radio\"\n            value=\"DESC\"\n          />\n        </label>\n      </div>\n      <div className=\"m-1\">\n        <button\n          data-testid=\"column-sort-button\"\n          onClick={ () => setOrderApproved(true) }\n          type=\"button\"\n        >\n          Ordenar\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default OrderColumn;\n","import React from 'react';\nimport InputNamePlanet from '../InputNamePlanet';\nimport SelectNumericValues from '../SelectNumericValues';\nimport ShowFilterScreen from '../ShowFilterScreen';\nimport OrderColumn from '../OderColumn';\n\nfunction SearchBar() {\n  return (\n    <div className=\"d-flex m-1 justify-content__center\">\n      <InputNamePlanet />\n      <SelectNumericValues />\n      <ShowFilterScreen />\n      <OrderColumn />\n    </div>\n  );\n}\n\nexport default SearchBar;\n","import React from 'react';\nimport SearchBar from '../SearchBar';\n\nfunction Header() {\n  return (\n    <header className=\"container bg-galaxy  bg-gradient__galaxy\">\n      <h1 className=\"text-center m-1 font-poller\">Star Wars Planets Search</h1>\n      <SearchBar />\n    </header>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport Provider from './provider/Provider';\nimport Table from './components/Table';\nimport Header from './components/Header';\n\nfunction App() {\n  return (\n    <Provider>\n      <Header />\n      <Table />\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './style/index.css';\nimport './style/main.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}